package com.twizo.models;

/**
 * This file is part of the Twizo Java API
 *
 * For the full copyright and licence information, please view the Licence file that was distributed
 * with this source code
 *
 * (c) Twizo - info@twizo.com
 */
public class Sms {

    /**
     * String, not null. The application used for sending the SMS.
     */
    private String applicationTag;

    /**
     * String, not null. The body as specified when sending the SMS.
     */
    private String body;

    /**
     * String, can be null. The callback URL specified when sending the SMS. Our system will call this
     * URL to return the delivery report of the SMS.
     */
    private String callBackUrl;

    /**
     * String, not null. The datetime the SMS was received by the API. The datetime is in ISO-8601
     * format.
     */
    private String createdDateTime;

    /**
     * Integer, can be null. The DCS value as specified when sending the SMS.
     */
    private Integer dcs;

    /**
     * String, not null. The unique identifier, generated by the API, of the SMS.
     */
    private String messageId;

    /**
     * String, can be null. The network code of the operator the mobile number is subscribed to. The
     * network code is the MCC (Mobile Country Code) and MNC (Mobile Network Code) concatenated.
     */
    private String networkCode;

    /**
     * Integer, can be null. The PID value as specified when sending the SMS.
     */
    private Integer pid;

    /**
     * Integer, can be null. When the SMS is rejected or could not be delivered a reasonCode is given
     * explaining the cause of the rejection.
     */
    private Integer reasonCode;

    /**
     * String, not null. The phone number as specified when sending the SMS.
     */
    private String recipient;

    /**
     * Integer, not null. The result type specified when sending the SMS. Possible values are: 0	No
     * results (default) 1	Callback (you have to specify the callbackUrl) 2	Polling 3	Callback &
     * polling (you have to specify the callbackUrl)
     */
    private Integer resultType;

    /**
     * Float, can be null. The sales price of the SMS.
     */
    private Float salesPrice;

    /**
     * String, can be null. The currency code of the salesPrice field. The value can be ‘eur’, ‘usd’
     * or ‘sgd’. The currency code is defined by the currency of your wallet.
     */
    private String salesPriceCurrencyCode;

    /**
     * String, can be null. The scheduled delivery time as specified when sending the SMS.
     */
    private String scheduledDelivery;

    /**
     * String, not null. The sender of the SMS as specified when sending the SMS.
     */
    private String sender;

    /**
     * Integer, can be null. The senderNpi of the SMS as specified when sending the SMS or the
     * automatically detected value by the API. See our tutorial ‘Sender’ for more information.
     */
    private Integer senderNpi;

    /**
     * Integer, can be null. The senderTon of the SMS as specified when sending the SMS or the
     * automatically detected value by the API. See our tutorial ‘Sender’ for more information.
     */
    private Integer senderTon;

    /**
     * String, not null. The status of the SMS. The status and statusCode fields are bound together
     * and can have the following values:
     *
     * 0	No status: The SMS is received by our system. This is a temporary status, a final status
     * will follow later.
     * 1	Delivered: The SMS is successful delivered to the mobile phone.
     * 2	Rejected: The SMS is rejected by the system and is not sent to the phone. The reasonCode
     * field indicates the reason why it is rejected. See further down below for an overview of possible reasonCodes.
     * 3	Expired: The SMS is expired as it could not be delivered within the specified validity time.
     * 4	Enroute: The SMS is on it’s way in the mobile network and will be tried to deliver at a
     * later moment. This is a temporary status, a final status will follow later.
     * 5	Buffered: The SMS is buffered in a queue in the mobile network and will be tried to deliver
     * at a later moment. This is a temporary status, a final status will follow later.
     * 6	Accepted: The SMS is accepted by the mobile network and will be tried to deliver at a later
     * moment. This is a temporary status, a final status will follow later.
     * 7	Undelivered: The SMS could not be delivered.
     * 8	Deleted: The SMS is deleted and will not be delivered.
     * 9	Unknown: The SMS could not be delivered due to an unknown reason.
     */
    private String status;

    /**
     * Integer, not null. See ‘status’ field for more information.
     */
    private Integer statusCode;

    /**
     * String, can be null. The tag as specified when sending the SMS.
     */
    private String tag;

    /**
     * String, can be null. The timestamp when the message is delivered to the mobile phone.
     */
    private String resultTimeStamp;


    /**
     * String, can be null. The UDH as specified when sending the SMS.
     */
    private String udh;

    /**
     * Integer, not null. The validity in seconds as specified when sending the SMS or the default
     * value (60)
     */
    private Integer validity;

    /**
     * String, can be null. The datetime until when the SMS is valid. This is calculated by the API
     * based on the validity field.
     */
    private String validUntilDateTime;

    public String getApplicationTag() {
        return applicationTag;
    }

    public String getBody() {
        return body;
    }

    public String getCallBackUrl() {
        return callBackUrl;
    }

    public String getCreatedDateTime() {
        return createdDateTime;
    }

    public Integer getDcs() {
        return dcs;
    }

    public String getMessageId() {
        return messageId;
    }

    public String getNetworkCode() {
        return networkCode;
    }

    public Integer getPid() {
        return pid;
    }

    public Integer getReasonCode() {
        return reasonCode;
    }

    public String getRecipient() {
        return recipient;
    }

    public Integer getResultType() {
        return resultType;
    }

    public Float getSalesPrice() {
        return salesPrice;
    }

    public String getSalesPriceCurrencyCode() {
        return salesPriceCurrencyCode;
    }

    public String getScheduledDelivery() {
        return scheduledDelivery;
    }

    public String getSender() {
        return sender;
    }

    public Integer getSenderNpi() {
        return senderNpi;
    }

    public Integer getSenderTon() {
        return senderTon;
    }

    public String getStatus() {
        return status;
    }

    public Integer getStatusCode() {
        return statusCode;
    }

    public String getTag() {
        return tag;
    }

    public String getResultTimeStamp() {
        return resultTimeStamp;
    }

    public String getUdh() {
        return udh;
    }

    public Integer getValidity() {
        return validity;
    }

    public String getValidUntilDateTime() {
        return validUntilDateTime;
    }

    @Override
    public String toString() {
        return "Sms{" +
                "applicationTag='" + applicationTag + '\'' +
                ", body='" + body + '\'' +
                ", callBackUrl='" + callBackUrl + '\'' +
                ", createdDateTime='" + createdDateTime + '\'' +
                ", dcs=" + dcs +
                ", messageId='" + messageId + '\'' +
                ", networkCode='" + networkCode + '\'' +
                ", pid=" + pid +
                ", reasonCode=" + reasonCode +
                ", recipient='" + recipient + '\'' +
                ", resultType=" + resultType +
                ", salesPrice=" + salesPrice +
                ", salesPriceCurrencyCode='" + salesPriceCurrencyCode + '\'' +
                ", scheduledDelivery='" + scheduledDelivery + '\'' +
                ", sender='" + sender + '\'' +
                ", senderNpi=" + senderNpi +
                ", senderTon=" + senderTon +
                ", status='" + status + '\'' +
                ", statusCode=" + statusCode +
                ", tag='" + tag + '\'' +
                ", resultTimeStamp='" + resultTimeStamp + '\'' +
                ", udh='" + udh + '\'' +
                ", validity=" + validity +
                ", validUntilDateTime='" + validUntilDateTime + '\'' +
                '}';
    }
}
