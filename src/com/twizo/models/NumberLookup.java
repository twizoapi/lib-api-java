package com.twizo.models;

/**
 * This file is part of the Twizo Java API
 *
 * For the full copyright and licence information, please view the Licence file that was distributed
 * with this source code
 *
 * (c) Twizo - info@twizo.com
 */
public class NumberLookup {

    /**
     * String, not null. The application used for sending the Number Lookup.
     */
    private String applicationTag;

    /**
     * String, can be null. The callback URL specified when sending the Number Lookup. Our system will
     * call this URL to return the result of the Number Lookup.
     */
    private String callbackUrl;

    /**
     * String, can be null. A two digit ISO 3166-1 alpha-2 code  of the country of the operator the
     * mobile number is subscribed to.
     */
    private String countryCode;

    /**
     * String, not null. The datetime the Number Lookup was received by the API. The datetime is in
     * ISO-8601 format.
     */
    private String createdDateTime;

    /**
     * String, can be null. The IMSI (International Mobile Subscriber Identity) of the SIM card the
     * mobile number is linked to.
     */
    private String imsi;

    /**
     * String, not null. The unique identifier, generated by the API, of the Number Lookup.
     */
    private String messageId;

    /**
     * String, can be null. The MSC (Mobile Switching Center) of the operator the mobile phone is
     * currently registered to. This can be used to identify if a mobile phone is currently roaming or
     * not.
     */
    private String msc;

    /**
     * Integer, can be null. The network code of the operator the mobile number is subscribed to. The
     * network code is the MCC (Mobile Country Code) and MNC (Mobile Network Code) concatenated.
     */
    private Integer networkCode;

    /**
     * String, not null. The phone number as specified when sending the Number Lookup.
     */
    private String number;

    /**
     * String, can be null. The name of the operator the mobile number is subscribed to.
     */
    private String operator;

    /**
     * Integer, can be null. When the Number Lookup is rejected or could not be performed a reasonCode
     * is given explaining the cause of the rejection.
     */
    private Integer reasonCode;

    /**
     * The result type specified when sending the Number Lookup. Possible values are:
     * 0:	No results (default)
     * 1:	Callback (you have to specify the callbackUrl)
     * 2:	Polling
     * 3:	Callback & polling (you
     * have to specify the callbackUrl)
     */
    private Integer resultType;

    /**
     * Float, can be null. The sales price of the Number Lookup.
     */
    private Float salesPrice;

    /**
     * String, can be null. The currency code of the salesPrice field. The value can be ‘eur’, ‘usd’
     * or ‘sgd’. The currency code is defined by the currency of your wallet.
     */
    private String salesPriceCurrencyCode;

    /**
     * String, not null. The status of the Number Lookup. The status and statusCode fields are bound
     * together and can have the following values:
     *
     * 0	No status: The Number Lookup is received by our system. This is a temporary status, a final
     * status will follow later.
     * 1	Delivered: The NumberLookup is successfully performed.
     * 2	Rejected: The Number Lookup is rejected by the system and is not performed. The reasonCode
     * field indicates the reason why it is rejected. See further down below for an overview of
     * possible reasonCodes.
     * 3	Expired: The Number Lookup is expired as it could not be performed within the specified
     * validity time.
     * 4	Enroute: The Number Lookup is on it’s way in the mobile network and will be tried to perform
     * at a later moment. This is a temporary status, a final status will follow later.
     * 5	Buffered: The Number Lookup is buffered in a queue in the mobile network and will be tried
     * to perform at a later moment. This is a temporary status, a final status will follow later.
     * 6	Accepted: The Number Lookup is accepted by the mobile network and will be tried to perform
     * at a later moment. This is a temporary status a final status will follow later.
     * 7	Undelivered: The Number Lookup could not be performed.
     * 8	Deleted: The Number Lookup is deleted and will not be performed.
     * 9	Unknown:	The Number Lookup could not be performed due to an unknown reason.
     */
    private String status;

    /**
     * Integer, not null. See ‘status’ field for more information.
     */
    private Integer statusCode;

    /**
     * String, can be null. The tag as specified when sending the Number Lookup.
     */
    private String tag;

    /**
     * String, can be null. The timestamp when the Number Lookup was performed.
     */
    private String resultTimestamp;

    /**
     * Integer, not null. The validity in seconds as specified when sending the Number Lookup or the
     * default value (60)
     */
    private Integer validity;

    /**
     * String, can be null. The datetime until when the Number Lookup is valid. This is calculated by
     * the API based on the validity field.
     */
    private String validUntilDateTime;

    public String getApplicationTag() {
        return applicationTag;
    }

    public String getCallbackUrl() {
        return callbackUrl;
    }

    public String getCountryCode() {
        return countryCode;
    }

    public String getCreatedDateTime() {
        return createdDateTime;
    }

    public String getImsi() {
        return imsi;
    }

    public String getMessageId() {
        return messageId;
    }

    public String getMsc() {
        return msc;
    }

    public Integer getNetworkCode() {
        return networkCode;
    }

    public String getNumber() {
        return number;
    }

    public String getOperator() {
        return operator;
    }

    public Integer getReasonCode() {
        return reasonCode;
    }

    public Integer getResultType() {
        return resultType;
    }

    public Float getSalesPrice() {
        return salesPrice;
    }

    public String getSalesPriceCurrencyCode() {
        return salesPriceCurrencyCode;
    }

    public String getStatus() {
        return status;
    }

    public Integer getStatusCode() {
        return statusCode;
    }

    public String getTag() {
        return tag;
    }

    public String getResultTimestamp() {
        return resultTimestamp;
    }

    public Integer getValidity() {
        return validity;
    }

    public String getValidUntilDateTime() {
        return validUntilDateTime;
    }

    @Override
    public String toString() {
        return "NumberLookup{" +
                "applicationTag='" + applicationTag + '\'' +
                ", callbackUrl='" + callbackUrl + '\'' +
                ", countryCode='" + countryCode + '\'' +
                ", createdDateTime='" + createdDateTime + '\'' +
                ", imsi='" + imsi + '\'' +
                ", messageId='" + messageId + '\'' +
                ", msc='" + msc + '\'' +
                ", networkCode=" + networkCode +
                ", number='" + number + '\'' +
                ", operator='" + operator + '\'' +
                ", reasonCode=" + reasonCode +
                ", resultType=" + resultType +
                ", salesPrice=" + salesPrice +
                ", salesPriceCurrencyCode='" + salesPriceCurrencyCode + '\'' +
                ", status='" + status + '\'' +
                ", statusCode=" + statusCode +
                ", tag='" + tag + '\'' +
                ", resultTimestamp='" + resultTimestamp + '\'' +
                ", validity=" + validity +
                ", validUntilDateTime='" + validUntilDateTime + '\'' +
                '}';
    }
}
